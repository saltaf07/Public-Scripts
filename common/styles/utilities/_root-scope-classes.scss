@each $spacing-size in $grid-config {
  $spacing-size-key: nth($spacing-size, 1);
  $spacing-size-map: nth($spacing-size, 2);
  $spacing-size-respond: map-get($spacing-size-map, 'respond');

  @if (length($spacing-size-respond) > 1) {
    @include respond-to(nth($spacing-size-respond, 1)) {
      @include spacing-classes($spacing-size-key);
    }
  } @else {
    @include respond-to($spacing-size-respond) {
      @include spacing-classes($spacing-size-key);
    }
  }
}

@for $i from 1 through 5 {
  .border-width-#{$i} {
    border-width: #{$i}px;
    border-style: solid;
  }

  @each $direction in $spacing-directions {
    .border-#{$direction}-width-#{$i} {
      border-#{$direction}-width: #{$i}px;
      border-#{$direction}-style: solid;
    }
  }
}

// stylelint-disable sh-waqar/declaration-use-variable
@each $color-key, $color-value in $colors {
  .font-#{$color-key} {
    color: nth($color-value, 1);

    .icon__shape {
      fill: nth($color-value, 1);
    }
  }

  .font-hover-#{$color-key}:hover,
  .font-hover-#{$color-key}:focus {
    color: nth($color-value, 1);
  }

  .bg-#{$color-key} {
    background: nth($color-value, 1);
  }

  .bg-hover-#{$color-key} {
    &:hover,
    &:focus {
      background: nth($color-value, 1);
    }
  }

  .border-color-#{$color-key} {
    border-color: nth($color-value, 1);
  }

  .border-hover-color-#{$color-key}:hover,
  .border-hover-color-#{$color-key}:focus {
    border-color: nth($color-value, 1);
  }
}

.transition-bg {
  transition: background $transition-properties;
}

// stylelint-enable sh-waqar/declaration-use-variable

.caps {
  text-transform: uppercase;
}

// This should trump other display styles
// stylelint-disable declaration-no-important
.is-hidden {
  display: none !important;
}

.is-hidden-s {
  @include respond-between('small', 'medium') {
    display: none !important;
  }
}

.is-hidden-m {
  @include respond-between('medium', 'large') {
    display: none !important;
  }
}

.is-hidden-l {
  @include respond-between('large', 'xlarge') {
    display: none !important;
  }
}

.is-hidden-xl {
  @include respond-to('xlarge') {
    display: none !important;
  }
}

// stylelint-enable declaration-no-important

.line-height-1.line-height-1 {
  line-height: 1;
}

// Adds momentum scrolling to iOS
// TODO: consider removing if/when scroll snapping is implemented
.touch-scroll {
  -webkit-overflow-scrolling: touch;
}

.v-align-middle {
  vertical-align: middle;
}

.v-center {
  top: 50%;
  transform: translateY(-50%);
}

.flex {
  display: flex;
}

.flex-l-up {
  @include respond-to('large') {
    display: flex;
  }
}

.flex--column {
  flex-direction: column;
}

.flex-inline {
  display: inline-flex;
}

.flex--v-start {
  align-items: flex-start;
}

.flex--v-end {
  align-items: flex-end;
}

.flex--v-center {
  align-items: center;
}

.flex--h-baseline {
  align-items: baseline;
}

.flex--wrap {
  flex-wrap: wrap;
}

.flex--h-center {
  justify-content: center;
}

.flex--h-space-between {
  justify-content: space-between;
}

.flex-end {
  justify-content: flex-end;
}

.flex-1 {
  flex: 1;
}

.pointer {
  cursor: pointer;
}

.pointer-events-none {
  pointer-events: none;
}

.pointer-events-all {
  pointer-events: all;
}

.plain-button {
  appearance: none;
  font-family: inherit;
  letter-spacing: inherit;
  background: color('transparent');
  border: 0;
  text-align: left;
}

.plain-link,
.plain-link:link,
.plain-link:visited {
  text-decoration: none;
  border: none;

  .body-text & {
    text-decoration: none;
    border: none;
  }
}

.underline-on-hover:hover,
:link:hover .underline-on-hover {
  text-decoration: underline;
}

.text-align-right {
  text-align: right;
}

.text-align-center {
  text-align: center;
}

.no-visible-focus {
  &,
  &:focus {
    outline: 0;
  }
}

.plain-list {
  list-style: none;
}

.block {
  display: block;
}

// Flex for most browsers, block for IE
.flex-ie-block {
  display: block; // IE

  @supports(display: flex) { // IE ignores @supports
    display: flex;
  }
}

.inline {
  display: inline;
}

.inline-block {
  display: inline-block;
}

.nowrap {
  white-space: nowrap;
}

.float-r {
  float: right;
}

.float-l {
  float: left;
}

.rotate-r-8 {
  transform: rotate(8deg);
}

.h-center {
  margin-left: auto;
  margin-right: auto;
}

.text--truncate {
  max-height: 80px;
  overflow: hidden;

  &:after {
    position: absolute;
    top: 45px;
    content: '';
    display: block;
    width: 100%;
    height: 35px;
    background: linear-gradient(rgba(255, 255, 255 , 0.001), color('white')); // Safari doesn't like transparent (shows as grey), so giving a value very close to transparent.
  }
}

.flush-container-left {
  position: absolute;
  left: $container-padding-s;

  @include respond-to('medium') {
    left: $container-padding-m;
  }

  @include respond-to('large') {
    left: $container-padding-l;
  }

  @include respond-to('xlarge') {
    left: calc(((100vw - #{$container-width-max}) / 2) + #{$container-padding-xl});
  }
}

.flush-container-right {
  position: absolute;
  right: $container-padding-s;

  @include respond-to('medium') {
    right: $container-padding-m;
  }

  @include respond-to('large') {
    right: $container-padding-l;
  }

  @include respond-to('xlarge') {
    right: calc(((100vw - #{$container-width-max}) / 2) + #{$container-padding-xl});
  }
}

.no-margin {
  margin: 0;
}

.no-padding {
  padding: 0;
}

.margin-h-auto {
  margin-left: auto;
  margin-right: auto;
}

.margin-top-auto {
  margin-top: auto;
}

.bg-transparent-black {
  background: color('transparent-black');
}

.bg-transparent-black--hover {
  transition: background 0.7s ease;

  &[href]:hover,
  &[href]:focus {
    background: color('black');
  }
}

.promo-link {
  height: 100%;
  color: color('black');

  &:hover .promo-link__title,
  &:focus .promo-link__title {
    text-decoration: underline;
    text-decoration-color: color('green');
  }
}

.promo-link__title {
  transition: color 400ms ease;
}

.rounded-corners {
  border-radius: $border-radius-unit;
}

.rounded-diagonal {
  border-top-left-radius: $border-radius-unit;
  border-bottom-right-radius: $border-radius-unit;
}
.rounded-top {
  border-top-left-radius: $border-radius-unit;
  border-top-right-radius: $border-radius-unit;
}

.rounded-bottom {
  border-bottom-left-radius: $border-radius-unit;
  border-bottom-right-radius: $border-radius-unit;
}

.round {
  border-radius: 50%;
}

.relative {
  position: relative;
}

.absolute {
  position: absolute;
}

.full-width {
  width: 100%;
}

.full-height {
  height: 100%;
}

.full-max-width {
  max-width: 100%;
}

// Images
.width-inherit {
  width: inherit;
}

.image-max-height-restricted {
  max-height: 90vh;
  max-width: 100%;
  width: auto;
  margin: 0 auto;
}

// This is for when we receive content from a CMS,
// making it easier to style the first node
.first-para-bold p:first-of-type {
  @extend %font-hnm;
  @extend %font-size-4;
  font-weight: bold;
}

// For when we get HTML out of systems like Prismic
.first-para-no-margin p:first-of-type {
  margin: 0;
}

// This removes the element from the flow, as well as it's visibility
.visually-hidden {
  @include visually-hidden;
}

.opacity-0 {
  opacity: 0;
}

.hidden {
  visibility: hidden;
}

.overflow-hidden {
  overflow: hidden;
}

.cursor-zoom-in {
  cursor: zoom-in;
}

// Used mainly for images
.max-height-70vh {
  max-height: 70vh;
}

.width-auto {
  width: auto;
  max-width: 100%;
}

.clearfix {
  @include clearfix;
}

.drop-cap {
  @extend %font-wb;
  font-size: 3em;
  color: color('black');
  float: left;
  line-height: 1em;
  padding-right: 0.1em;
  position: relative;
  top: 0.05em;
}

.spacing-component + .spacing-component,
// HACK: allow empty <SpacingComponent /> to act as a shim where we need more
// space but where there isn't a preceding <SpacingComponent>stuff</SpacingComponent>
.spacing-component:empty {
  margin-top: $spacing-unit * 4;

  @include respond-to('medium') {
    margin-top: $spacing-unit * 6;
  }
}

.spacing-section {
  padding-bottom: $spacing-unit * 8;

  @include respond-to('medium') {
    padding-bottom: $spacing-unit * 10;
  }
}

// TODO: move this back into PageHeader if/when we
// use e.g. styled JSX with media query support
.hero-picture-bg {
  height: 50%;
  width: 100%;
  bottom: $spacing-unit * -8;

  @include respond-to('medium') {
    bottom: $spacing-unit * -10;
  }
}

// TODO: this better
.story-promo-featured {
  // Because this item's flex-direction is row rather than column,
  // it doesn't have the same issues as the others, so we can use
  // flexbox and avoid a poor layout in IE.
  .flex-ie-block {
    display: flex;
  }

  @include respond-to('medium') {
    .story-promo {
      min-height: 0;
      flex-direction: row;
      align-items: flex-start;
      border-bottom-right-radius: 0;
    }

    .story-promo__text {
      width: percentage(1 / 3);
      padding-right: 2 * $spacing-unit;
      padding-top: 0;
      order: 1;
    }

    .story-promo__image {
      border-top-left-radius: $border-radius-unit;
      overflow: hidden;
      width: percentage(2 / 3);
      order: 2;
    }
  }

  .promo-link__title {
    @extend %font-wb;
    @extend %font-size-2;
  }
}

// TODO: use this for e.g. Promo hover behaviour too
.card-link {
  text-decoration: none;

  &:hover,
  &:focus {
    .card-link__title {
      text-decoration: underline;
      text-decoration-color: color('green');
    }
  }
}

// This is used when you want an elemnt to take the line-height of the content
// that would be in it, but you have no content.
.empty-filler:before {
  content: "\200b";
}

$helvetica-neue-medium-base: 'HelveticaNeue-Medium', 'Helvetica Neue Medium', 'Arial Black', sans-serif;
$helvetica-neue-light-base: 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial, sans-serif;
$wellcome-bold-base: 'Arial Black', sans-serif;
$lettera-base: 'Courier New', Courier, Monospace;
$font-sizes-at-breakpoints: (
  'small': (
    1: 28px,
    2: 24px,
    3: 22px,
    4: 16px,
    5: 15px,
    6: 14px
  ),
  'medium': (
    1: 32px,
    2: 28px,
    3: 22px,
    4: 18px,
    5: 15px,
    6: 14px
  ),
  'large': (
    1: 40px,
    2: 32px,
    3: 24px,
    4: 20px,
    5: 16px,
    6: 14px
  )
);

%font-hnm,
.font-hnm,
%font-hnl,
.font-hnl {
  font-weight: normal;
  letter-spacing: 0.02em;
}

%font-hnm,
.font-hnm {
  font-family: $helvetica-neue-medium-base;

  .fonts-loaded & {
    font-family: 'Helvetica Neue Medium Web', $helvetica-neue-medium-base;
  }
}

%font-hnl,
.font-hnl {
  font-family: $helvetica-neue-light-base;

  .fonts-loaded & {
    font-family: 'Helvetica Neue Light Web', $helvetica-neue-light-base;
  }
}

%font-wb,
.font-wb {
  font-family: 'Wellcome Bold Web Subset', $wellcome-bold-base;

  .fonts-loaded & {
    font-family: 'Wellcome Bold Web', 'Wellcome Bold Web Subset', $wellcome-bold-base;
  }
}

%font-lr,
.font-lr {
  font-family: $lettera-base;

  .fonts-loaded & {
    font-family: 'Lettera Regular Web', $lettera-base;
  }
}

@each $font-breakpoint-key, $font-breakpoint-value in $font-sizes-at-breakpoints {
  @include respond-to($font-breakpoint-key) {
    @each $font-size-key, $font-size-value in $font-breakpoint-value {
      %font-size-#{$font-size-key},
      .font-size-#{$font-size-key} {
        font-size: $font-size-value;
        line-height: 1.5;
      }
    }
  }
}

